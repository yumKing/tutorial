git操作：
1、github上创建一个仓库
2、git remote add origin 仓库地址
3、git pull origin master(第一次报错)
"	1、fatal":"Couldn't find remote ref master 不用管，继续提交"
	2、git remote rm origin
	   git remote add origin XXXX
4、git push -u origin master

=======================
git安装配置:

用户配置:
git config --global user.name xxx
git config --global user.email xxx

git config --system --unset credential.helper

文本编辑器配置:(默认不用设置)
git config --global core.editor emacs

差异分析工具配置(默认不用设置)
git config --global merge.tool vimdiff

检查已有的配置信息
git config --list

基本操作:
git init , 在需要把制定项目交由git管理使用，项目根目录使用
git add xxx/all ,将修改的文件或者很多文件添加到缓存区时使用
git commit ,提交修改到本地git仓库
git commit -a,暂存加提交，简化操作
git commit -amend 提交时，将最后一次已提交的记录删除，并生成新的提交版本

git clone [url] [local_prj_name],
"url 协议":"git://  http(s)://  user@server://path.git"
将远程仓库克隆到本地,可以修改项目名
git push origin maset ,提交本地修改到远程仓库

git状态:(查看，git status)
未跟踪:该文件从来没有拉入git管理中
已跟踪:该文件已经处于git管理中
未修改:第一次clone后，处于git中且没有修改
已修改:在git管理中，且本地做了修改
暂存区:执行了git add命令后的文件状态
提交到本地:执行了git commit命令后，在暂存区中的文件被提交本地库，并新开了一个历史版本

查看详细修改:
"git diff ":"当前工作区和暂存区的文件比较，如果暂存区没有，则和最新版本比较"
git diff --cached/--staged :暂存区和最新版本的比较

忽略某些文件的提交
文件 .gitignore 的格式规范如下：
所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。
可以使用标准的 glob 模式匹配。
匹配模式最后跟反斜杠（/）说明要忽略的是目录。
要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。

删除文件:
git rm ,
git rm --cached,

移动或修改文件
git mv [from_file] [to_file/to_dir]

查看历史记录:
git log,最新的版本再最上面
git log -p -2,每次提交的内容差异，-2表示最近2次更新
git log --stat ,增改行统计
git log --pretty=oneline
git reflog
git log --graph --pretty=oneline --abbrev-commit

撤销操作:
取消已经暂存的文件,git reset HEAD xxx
git reset --hard origin/master  将远程分支强制覆盖本地分支

远程仓库的使用:
查看远程仓库, git remote -v(详情)
添加远程仓库, git remote add [shortname] [url]
从远程仓库抓取数据到本地git库, git fetch shortname,创建了一个新的分支
推送数据到远程仓库, git push origin master,只有在所克隆的服务器上有写权限，或者其他人没有提交数据
查看远程仓库的信息, git remote show [remote-name]
远程仓库的重命名和删除, git remote rename/rm

打标签:
轻量级和含附注两种
显示标签,git tag
设置历史版本标签, git tag -a [历史版本校验和前几个字符或者全部都可以] [说明]
分享标签到远程服务器, git push origin [tagname] ,分享所有，则是git push origin --tags

本地分支使用:(将HEAD指针指向对应分支)
查看分支, git branch
创建分支, git branch [分支名]
切换分支, git checkout [分支名]
创建并切换分支, git checkout -b  [分支名]
合并分支, git merge xxx,在当前分支下,把xxx合并到当前分支
git merge -Xignore-space-change  忽略空白改变

删除合并过的分支, git branch -d [分支名]
查看已经合并(未合并)过的分支, git branch --merged(--no-merged)

分支冲突
git ls-files -u 可以查看共同的祖先版本(1) ，当前分支版本(2)，要合并分支版本(3)
或者使用git show :[1/2/3]:[冲突文件] > 本地文件名
手动修改冲突后，然后使用git merge-file [冲突文件]

Git如何在不提交当前分支内容的情况下切换到其它分支进行操作——git stash 隐藏分支
1、git stash
2、切换到其他分支执行完后
3、git stash list 查找所有的隐藏分支
4、git stash apply [id] ，如stash {0}
5、删除隐藏分支信息，git stash drop [id]

将一个分支上的部分内容合并到当前分支
git checkout --patch xxx_brach file

修改每次提交中的信息
	


远程分支使用:
用git push --set-upstream origin branch_name来在远程创建一个与本地branch_name同名的分支并跟踪
如果远程新建了一个分支，本地没有该分支，可以用git checkout --track origin/branch_name
如果创建了一个远程分支branch_name，而在本地想创建一个和远程分支不同名字的分支，则可以使用git checkout -b new_branch_name origin/branch_name

创建并切换分支, git checkout -b  [分支名] [远程名/分支名]
远程分支合并到本地分支, git merge [远程分支名]
删除远程分支, git push [远程名] [本地分支]:[远程分支]，其中设置本地分支为空
	即:git push [远程名] :[远程分支]

分支的变基:不要在公共仓库中同时使用合并和变基操作
git rebase xxx ,将当前分支变基到指定分支xxx的上游去,将当前分支的变化在xxx上重演一遍

git服务器:
"协议":"本地传输，SSH协议，Git协议和Http协议"
SSH协议, 唯一一个同时支持读写操作的网络协议
	git clone ssh://user@server/project.git
	git remote add origin git@github.com:Username/Your_Repo_Name.git
	缺点:不能通过它对仓库实现匿名访问
Git协议, 提供匿名访问仓库的功能，并且可以允许推送操作，但是没有授权机制

HTTP协议,  易于架设,HTTP 进行推送操作也是可能的


Git工具:
交互式暂存, git add -i
=====================================================
linux 外网ip查询
curl http://members.3322.org/dyndns/getip
=====================================================
scrapy 安装
使用pip安装scrapy不成功,则:（安装whl之前先安装wheel）
下载scrapy whl文件
下载scrapy依赖库twiste whl文件

1、安装pip install twiste.whl
2、安装scrapy相关依赖包,直接使用pip安装即可
3、安装scrapy
4、测试安装成功：scrapy -h

scrapyd
pip install scrapyd
pip install scrapyd-client

配置default-scrapyd.conf 或者配置/etc/scrapyd/scrapyd.conf
主要修改dbs eggs logs 目录位置，bind_address
爬虫运行：除了这些参数外，如果还设置了其他参数，则为spider中的参数设置
curl -XPOST http://127.0.0.1:6800/schedule.json -d project=myprojectname -d spider=spidername -d setting=key=value -d jobid= -d _version=  -d arg1=val1
检查服务的加载状态
curl -XGET http://127.0.0.1:6800/daemonstatus.json
添加一个版本的工程，如果不存在则创建这个工程
curl -XPOST http://127.0.0.1:6800/addversion.json -F projecct=myprojectname -F version=r32 -F egg=@myproject.egg
停止一个scrapy项目
curl -XPOST http://127.0.0.1:6800/cancel.json -d project=myprojectname -d job=jobid
获得scrapy项目列表
curl -XGET http://127.0.0.1:6800/listprojects.json
获得可用的一个scrapy项目的各个版本
curl -XGET http://127.0.0.1:6800/listversions.json?project=myprojectname
获得一个scrapy项目最新版本(或指定版本)的所有spiders
curl -XGET http://127.0.0.1:6800/listspiders.json?project=myprojectname&_version=latest
获得pending running finishing jobs 列表,可用指定某一个项目;注：所有的jobs都存在内存中，scrapyd重启清理
curl -XGET http://127.0.0.1:6800/listjobs.json?project=oneprojectname
删除一个项目的某个版本
curl -XPOST http://127.0.0.1:6800/delversion.json -d project=oneprojectname -d version=r1
删除一个项目
curl -XPOST http://127.0.0.1:6800/delproject.json -d project=oneprojectname
======================================================================
twisted
模型：
	1、同步模型：任务顺序执行
	2、多线程模型 ： 执行顺序随机，有操作系统分配
	3、异步模型：任务也是交错运行，但是单线程控制下的，与多线程很大的不同在于，多线程模型停止一个任务的决定权在操作系统手中，
		而异步模型则是程序员手中，一个任务要想运行必须显式放弃当前运行的任务 的控制权
动机：
	异步编程模型之所以比多线程模型简单在于其单令流与显式地放弃对任务的控制权而不是被操作系统随机地停止
	但是异步模型要比同步模型复杂得多
	1.有大量的任务，因此在一个时刻至少有一个任务要运行
	2.任务执行大量的I/O操作，这样同步模型就会在因为任务阻塞而浪费大量的时间
	3.任务之间相互独立，以至于任务内部的交互很少。

reactor模式：
	利用循环体来等待事件发生，然后处理发生的事件的模型非常常见
	1、监视一系列与你I/O操作相关的文件描述符（description)
	2、不停地向你汇报那些准备好I/O操作的文件描述符
twisted:健壮、跨平台实现了reactor模式并含有很多附加功能的模型

twisted reactor addReaders removeReader 

twisted 每层api功能
每个Twisted的抽象都只与一个特定的概念相关。例如，第四部分中的客户端使用的IReadDescriptor，它就是“一个可以读取字节的文件描述符”的抽象
多数高层次抽象都是在低层次抽象的基础上建立的

twisted核心：reactor 循环体
Twisted的其它部分（即除了reactor循环体）可以这样理解：它们都是来辅助X来更好地使用reactor，这里的X可以是提供Web网页、处理一个数据库查询请求或其它更加具体内容

Transports抽象是通过Twisted中interfaces模块中ITransport接口定义的，一个Twisted的Transport代表一个可以收发字节的单条连接
Twisted的Protocols抽象由interfaces模块中的IProtocol定义，一个具体的Twisted的Protocol的实现应该对应一个具体网络协议的实现

=====================================================

1、创建项目：scrapy startproject tutorial
	scrapy.cfg:项目配置文件
	tutorial:项目python模块
	tutorial/item.py:项目的item文件
	tutorial/pipelines.py:项目的pipelines文件
	tutorial/settings.py:项目的设置文件
	tutorial/spiders:防止spider代码的模块

2、item定义：保存爬取到的数据的容器
	 模式:field = scrapy.Field()

3、spiders:
	定义一个类集成scrapy.Spider
		name ：必须定义，且唯一
		start_urls:(list类型) 初始要爬取的url列表
		parse():参数为url的响应结果对象response，返回生成的item和进一步处理的url的request对象

4、爬取
进入项目根目录，运行 scrapy crawl name  # 其中name为要爬取的spider的唯一名字


5、获取数据


others:
1、运行scrapy crawl name 报错
"提示 ImportError":"No module named 'win32api'"
需要安装 pip install pypiwin32

2、xpath
/html/body/div/div[2]/div[1]/div[1]
body > div > div:nth-child(2) > div.col-md-8 > div:nth-child(1)

"3、git clone 报错fatal: error":"RPC failed; result=55, HTTP code = 200"
	修改git传送字节限制
	git config --global http.postBuffer 52428800

4、git clone 报错curl 56 OpenSSL SSL_read:SSL_ERROR_sysCALL
	第一步使用env命令保证了忽略证书错误是单次行为，不会成为默认的设置
	1、env命令设置GIT_SSL_NO_VERIFY环境变量为true,并同时调用git clone
	如:env GIT_SSL_NO_VERIFY=true git clone https://<host_name/git/project.git

	第二次，则把忽略证书错误的设置限定在特定的仓库
	2、克隆完毕的仓库中将http.sslVerify设置为false
		git config http.sslVerify "false"

=================================================================================

scrapy-redis + scrapyd + scrapydWeb 分布式爬虫部署及可视化部署

spring + elastic-job 管理任务定时调度机制

spring + oracle + elasticsearch + quarz  java爬虫定时调度


spring 基本层
common包；
	Constants：系统常用变量类
	ItemDic：相关枚举定义
	SessionThreadLocal：会话线程池local

controller包：spring控制器执行者

dao包：springDAO层

service包：springSERVICE层

model包：spring POJO

handler包：统一异常处理


web.xml：先做contextConfiguration --- applicationContext.xml  --- 这里可以定义实体bean(包括包扫描),特性开启（如：注解使能）,自定义配置文件，其他xml文件
		再做dispatcherServlet  --- application-servlet.xml  --- 这里可以定义实体bean，web相关配置
自编写的类，可以使用注解形式进行bean实例化，属性依赖注入

@Configuration 和 @Bean一起使用，前者是类注解，表明内部有bean实例的信息；后者为方法注解，表明该注解下的方法可以实例化bean，该bean的类型是方法返回值的类型，名字是方法名
@Autowired:根据对象类型搜索spring空间中的实体bean并注入到该对象变量中；@Resource:根据对象名字搜索spring空间中的实体bean并注入到该对象变量中

自定义注解要想被spring管理使用，只需要对注解处理器进行管理，这样只需要扫描所有注解处理器，然后和需要的注解匹配即可，
这里可以定义一个注解来标识注解处理器(这个注解需要被spring管理，使用component注解标识即可)，然后在spring上下文中搜索到这个注解下的所有注解处理器
================================================
db-service ：实现功能接口类，并提供dubbo 提供者服务到dubbo注册中心
db-api ： api接口 ，使用公共接口实现 --> 从注册中心的对应提供者中去取出提供者接口实现类
db-getway： 一些枚举和接口类
"db-common ":"功能接口类"
=================================================
redis 哨兵模式搭建

1、配置主从
slave-x:
	redis-cli下 使用 slaveof ip(master) port
把所有的slave配置好了，就可以在master中查看slave信息
	redis-cli下，使用info replication

2、配置哨兵
添加 sentinel.conf,主要配置哨兵监听端口，监听的master-redis
	port 26380 (指定哨兵监听端口)
    sentinel monitor master_redis 172.17.0.2 6379 1 （监听master_redis,将这个主服务器判断为失效并下线至少需要1个sentinel同意）
    daemonize yes （后台运行）
================================================
vim操作
------------
命令行模式， 默认模式
----------------------------
移动光标：
---------
w 		:	移动光标到下一个单词开头
e		:	移动光标到下一个单词结尾
b		:	移动光标到上一个单词
0 或 ^		:	移动光标到本行头
$		:	移动光标到本行尾
A		:	移动光标到行尾并处于追加状态，直接编辑
H		:	移动光标到屏幕首行
M		:	移动光标到屏幕中间
L		:	移动光标到屏幕尾行
gg		：	移动光标到文档首
G		：	移动光标到文档尾

ctrl + f  向下翻页
ctrl + b  向上翻页
ctrl + d  向下翻半页
ctrl + u  向上翻半页
ctrl + e  向下翻一行
ctrl + y  向上翻一行
[[    转到上一个位于第一列的"{"
]]    转到下一个位于第一列的"}"
{     转到上一个空行
}     撞到下一个空行
''    2个单引号，移动光标到上一个标记处
'.    一单一点， 移动光标到上一次修改行
`.   倒引号，一点， 移动光标到上一次修改点

查找：
-------
"/xxx (?xxx) 	":" /表示向下查找， ？表示向下查找；	查询字符串，高亮显示所有位置的该字符串， 按n为下一个高亮位置， 按N为上一个高亮位置"
"* (#)           ":"查找光标位置上的单词的所有字符串，并高亮"
"g*(g#)			":" 查找包含光标位置上的单词的所有字符串"
%				：查找光标所在处相匹配的反括号

visual block模式：在命令行模式ctrl+v进入
----------------------------
选择需要编辑的块，然后按大写字母I 键，进入编辑模式，
修改块的第一行后，按2次ESC即可对块中所有行改动

删除只需要对选中字符 后 按字母j，或者k选中注释符号 
然后按 d即可，不需要进入编辑模式


编辑模式， 按i即可进入
----------------------------

扩展模式，在命令行模式下输入 :xxx 表示
----------------------------
:noh 消除高亮
:n	 移动到指定行n
:set ignorecase 忽略大小写

================================================
python whl 集合
https://www.lfd.uci.edu/~gohlke/pythonlibs

python pypi镜像
https://pypi.tuna.tsinghua.edu.cn/simple

json批量生成数据
http://www.json-generator.com/
================================================
docker操作：

"docker search image 搜索镜像（运行文件）（image":"镜像名称）"
docker pull image (image： 镜像名称)
"docker rmi imageId  (imageId":"镜像的id)"

docker ps 查询所有启动的容器
docker ps  -a  查询所有容器
docker rm 镜像id    删除容器
docker start 镜像id   启动容器
docker stop 镜像id    停止容器

 启动容器：
docker run --name master -d  -p 6379:6379 -p 26379:26379  redis
   docker run 启动容器
	   --name 容器名称
	  -d 容器后台启动
	   -p 主机端口：容器的端口
	  redis 运行镜像
docker run -it --name redis-test redis 进入
ctrl + p + q  退出
docker attach containerid 再进入

查看容器运行的局域网ip地址：（阿里云默认第一个启动的容器IP地址：172.17.0.2, 依次为172.17.0.3, ...）
docker inspect 容器id


docker images
docker ps
docker container ls 
docker exec -it [containerid] /bin/bash
退出docker ctrl + p + q

docker build -t name:tag Dockerfile_dir

docker commit -m 'install python pip' container_id images_name:tag
================================================
elasticsearch
简单搜索：curl -XGET 'localhost:9200/index_name/doc_type/doc_id'  查找某一个文档
	返回指定属性字段：curl -XGET 'localhost:9200/index_name/doc_type/doc_id?_source=field1,field2'
	不要元数据：curl -XGET 'localhost:9200/index_name/doc_type/doc_id?_source
轻量搜索：curl -XGET 'localhost:9200/index_name/doc_type/_search' 索引所有文档
一般搜索 临时：curl -XGET 'localhost:9200/index_name/doc_type/_search?q=last_name:Smith'
   查询表达式：curl -XGET 'localhost:9200/index_name/doc_type/_search' -d 
'
{
	"query":{
		"match":{
			"last_name":"Smith"
		}
	
	}
}
'

复杂搜索：curl -XGET 'localhost:9200/index_name/doc_type/_search' -d 
'
{
	"query":{
		"bool":{
			"must:{
				"match":{
					"last_name":"Smith"
				}
			},
			"filter":{
				"range":{
					"age":{"gt":30}
				}
			}
		}
	}
}
'

全文搜索（相关性）：curl -XGET 'localhost:9200/index_name/doc_type/_search' -d 
'
{
	"query":{
		"match":{
			"about":"rock climbing"  # 这里会进行相关性排序，越接近搜索结构，分数越高
		}
	}
}
'

短语搜索：curl -XGET 'localhost:9200/index_name/doc_type/_search' -d 
'
{
	"query":{
		"match_phrase":{
"			"about"":""rock climbing" # 这里使用了match_phrase属性，来完全匹配短语rock climbing"
		}
	}
}
'

高亮搜索：curl -XGET 'localhost:9200/index_name/doc_type/_search' -d 
'
{    #对查询的字段高亮重新列出显示
	"query":{
		"match_phrase":{
			"about":"rock climbing"
		}
	},
	"highlight":{
		"fields":{
			"about":{}
		}
	}
}
'

分析（这里使用聚合aggregations分析）：curl -XGET 'localhost:9200/index_name/doc_type/_search' -d 
'
{    # 查询所有名字为Smith的雇员的兴趣爱好排名,并统计各个兴趣爱好的员工的平均年龄
	"query":{
		"match":{
			"last_name":"Smith"
		}
	},
	"aggs":{
		"all_interests":{
			"terms":{"field":"interests"}，
			"aggs":{ # 分级聚合
				"avg_age":{
					"avg":{"field":"age"}
				}
			}
		}
	}
}
'

集群内的原理：
分片是一个功能完整的搜索引擎，它拥有使用一个节点上的所有资源的能力
主分片：初始化就不能修改，主分片数确定了索引能存储的最大数据量
副本分片：主分片的备份，随时可以修改，可以提高吞吐量

更新冲突，乐观并发控制：_version元数据控制
文档是不可变的：他们不能被修改，只能被替换
_update 更新文档，使用脚本 ctx._source.fields 操作属性


多文档返回mget： curl -XGET 'localhost:9200/_mget' -d 
'
{
"	"docs"":"["
		{
			"_index":index_name,
			"_type":doc_type,
			"_id":"2"
		},
		{
			"_index":index_name,
			"_type":doc_type,
			"_id":"3"
		}
	]
}
'
curl -XGET 'localhost:9200/index_name/doc_type/_mget' -d 
'
{
"	"ids"":"["2", "1"]"
}
'

多文档操作bulk：curl -XPOST 'localhost:9200/_bulk' -d 
'
"{"delete":{"_index"":"index_name,"_type":doc_type,"_id":"3"}}"
"{"create":{"_index"":"index_name,"_type":doc_type,"_id":"2"}}"
{"title":"this is test"}
"{"index":{"_index"":"index_name,"_type":doc_type,"_id":"2"}}"
{"title":"this is test"}
"{"update":{"_index"":"index_name,"_type":doc_type,"_id":"2", "_retry_on_conflict":3}}"
{"doc":{"title":"this is test"}}
'

curl -XPOST 'localhost:9200/index_name/doc_type/_bulk' -d 
'
"{ "index"":"{}}"
"{ "title"":""User logged in" }"
"{ "index": { "_type"":"other_doc_type }}"
"{ "title"":""Overriding the default type" }"
'


query 属性：
bool：must，should，must_not
term：精确匹配，直接从分词库中查找，不进行分词器分析
match：分词匹配，查找前先将关键字分词，再去分词库查找
match_phrase:对关键词分词后，查找包含所有词组的结果

================================================
设计模式7个原则：
1、单一职责原则
2、开闭原则
3、里氏替换原则
4、依赖倒转原则
5、接口隔离原则
6、合成复用原则
7、迪米特法则

1、访问者模式
抽象访问者--具体访问者
抽象元素--具体元素
存储元素对象集合的对象结构
访问者：符合单一职责原则和开闭原则
被访问元素：不符合开不原则，每次添加新的元素，必须在访问者上添加对应的元素操作
这里体现了开闭原则的倾斜性
适合添加访问者的需求，就像流水线上不同工人对统一产品的操作，有的给产品打标签，有的给产品装箱；也像订阅模式，同一份报纸被不同人订阅
主要缺点：
	1、增加新的元素很困难
	2、破坏封装、
	
2、建造者模式 （生成器模式）
指挥者 ---- 安排建造次序，客户端只需要和他交互 ，对于待构建产品的组成部分不多时，可以省略指挥者，直接写到建造者中，但是这样不符合单一职责原则
建造者 ---- 一般有2类方法，部件构建方法，返回结果方法
产品类
建造者模式符合开闭原则，只需要实现抽象建造者即可
如果我们需要创建复杂对象并希望系统具备很好的灵活性和可扩展性可以考虑使用建造者模式
缺点：
建造者模式所创建的产品一般具有较多的共同点，产品之间的差异性很大，就不适用
如果产品的内部变化复杂，需要定义许多具体建造者来实现这种变化，也不适用

3、装饰模式，扩展系统功能
在继承复用过程中，如果需要扩展多个功能，那么进不能使用继承复用方式，因为后续多继承很多语言没法实现
装饰模式可以在不改变一个对象的本身功能的基础上对其添加额外的功能
抽象构建 -- 具体构建和装饰器的父类
装饰类  --- 具体装饰类
缺点：
使用装饰模式进行系统设计时将产生很多小对象，影响系统性能
对于多次装饰的对象，调试时寻找错误可能需要逐级排查，较为繁琐

4、原型模式，对象的克隆
抽象原型类 -- 具体原型类 -- 可以做为原型对象
浅克隆
深克隆，使用序列化方式

5、职责链模式 ，请求的链式处理
抽象处理者 --- 具体处理者
具体处理事件类
职责链由客户端发起
在软件开发中，如果遇到有多个对象可以处理同一请求时可以应用职责链模式，例如在Web应用开发中创建一个过滤器(Filter)链来对请求数据进行过滤
缺点： 
由于一个请求没有明确的接收者，那么就不能保证它一定会被处理
对于比较长的职责链，系统性能将受到一定影响
如果建链不当，可能会造成循环调用

6、单例模式
只能有一个实例，只能在类内部构造一个实例，该实例供系统全局使用
饿汉模式，类实例变量初始化直接new，因此在该类加载时就已经有了该类的实例
懒汉模式，类不使用时就不初始化，延时加载
Initialization Demand Holder (IoDH)初始化需求保持器技术，将饿汉模式和懒汉模式优点融合，保证了延时加载实例，也保证了线程安全
多例模式可以在单例莫斯的基础上扩展
缺点：
由于单例模式中没有抽象层，因此单例类的扩展有很大的困难
单例类的职责过重，在一定程度上违背了“单一职责原则”
自动垃圾回收机制(java) 会自动回收长时间不用的对象

7、桥接模式（接口模式）， 处理多维变化，抽象耦合(桥),实现解耦
不同维度分离 -- 不同维度的继承等级结构
抽象关联类 --- 桥
抽象桥 -- 与维度接口关联，可以使用维度中的操作
维度接口类 -- 一些维度操作
具体维度类 -- 具体维度操作
一般将某些维度作为抽象部分，其他维度作为实现部分

软件系统中某个类存在两个独立变化的维度，通过该模式可以将这两个维度分离出来，使两者可以独立扩展，让系统更加符合“单一职责原则”
在桥接模式中体现了很多面向对象设计原则的思想，包括“单一职责原则”、“开闭原则”、“合成复用原则”、“里氏代换原则”、“依赖倒转原则”等
在处理多维度变化时，和适配器模式联用
桥接模式和适配器模式用于设计的不同阶段，桥接模式用于系统的初步设计，对于存在两个独立变化维度的类可以将其分为抽象化和实现化两个角色，使它们可以分别进行变化；
而在初步设计完成之后，当发现系统与已有类无法协同工作时，可以采用适配器模式。但有时候在设计初期也需要考虑适配器模式，特别是那些涉及到大量第三方应用接口的情况

8、适配器模式，不兼容结构的协调
将一个类的接口和另一个类的接口匹配起来，而无须修改原来的适配者接口和抽象目标类接口
在对象适配器模式中，适配器与适配者之间是关联关系；在类适配器模式中，适配器与适配者之间是继承（或实现）关系
目标抽象类
适配器类 -- 继承目标抽象类，关联适配者类 （这是对象适配器中的方式），要达到的目的就是能够适配到目标抽象类(不能改变)
		 -- 类适配器中的适配器类和适配者类是继承关系，这样不适用于多个适配者，因为许多语言没有多继承
适配者类

双向适配器，用的较少
缺省适配器

9、备忘录模式，撤销功能，软件中的“后悔药”，是软件中的“月光宝盒”
原发器类：要保存内部状态的类，原发器类是一个具体的业务类
备忘录类：存储原发器内部状态的类，需要防止原发器以外的其他对象访问备忘录
负责人类；负责保管备忘录，但不能操作备忘录的内容，可以存储多个备忘录对象，只负责存储对象，而不修改对象
使用场景：
保存一个对象在某一个时刻的全部状态或部分状态
防止外界对象破坏一个对象历史状态的封装性

10、享元模式，对象复用，相当于将最基本的形式存入内部状态中，然后通过外部添加装饰器形态，变为外部状态
内部状态：存储在享元对象内部并且不会随环境改变而改变的状态，内部状态可以共享
外部状态：随环境改变而改变的、不可以共享的状态
抽象享元类 --- 具体享元类，共享 ，定义公共方法  --- 非共享具体享元类，不是共享的
享元工厂 -- 创建和存储享元类，提供一个用于存储享元对象的享元池

单纯享元模式和复合享元模式

享元模式一般和工厂模式或者组合模式一起使用
String类使用的是享元模式

11、解释器模式，自定义语言的实现
文法规则和抽象语法树，定义一个语言的文法，并且建立一个解释器来解释该语言中的句子，这里的“语言”是指使用规定格式和语法的代码
环境类(上下文类)：存储解释器之外的一些全局信息
抽象语法树类:声明了抽象的解释操作
终结表达式类：实现了与文法中的终结符相关联的解释操作
非终结表达式类；实现了文法中非终结符的解释操作

12、观察者模式，对象间的联动
发生改变的对象：观察目标，可以关联多个观察者
被通知的对象：观察者，观察者之间没有相互联系，可以扩展观察者
JDK对观察者模式的支持
jdk1.0及之前版本的事件模型使用的是职责链模式，之后采用基于观察者模式的委派事件模型
jdk的awt组件中的事件对象，事件源，事件监听器作为事件模型的三要素，其中的事件源就是观察目标，事件监听器是观察者，事件对象，作为共享部分
jdk中的事件模型都是使用的一对一的观察
mvc模型：模型、视图、控制器，其中的模型就是观察目标，视图就是观察者，控制器作为中介部分；当模型层的数据改变时，视图层将自动改变其显示内容

实现表示层和数据逻辑层的分离，定义了稳定的消息更新传递机制
观察者模式支持广播通信，观察目标会向所有已注册的观察者对象发送通知，简化了一对多系统设计的难度
观察者模式满足“开闭原则”的要求，增加新的具体观察者无须修改原有系统代码，在具体观察者与观察目标之间不存在关联关系的情况下，增加新的观察目标也很方便

