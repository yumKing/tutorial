git操作：
1、github上创建一个仓库
2、git remote add origin 仓库地址
3、git pull origin master(第一次报错)
	1、fatal: Couldn't find remote ref master 不用管，继续提交
	2、git remote rm origin
	   git remote add origin XXXX
4、git push -u origin master

=======================
git安装配置:

用户配置:
git config --global user.name xxx
git config --global user.email xxx

git config --system --unset credential.helper

文本编辑器配置:(默认不用设置)
git config --global core.editor emacs

差异分析工具配置(默认不用设置)
git config --global merge.tool vimdiff

检查已有的配置信息
git config --list

基本操作:
git init , 在需要把制定项目交由git管理使用，项目根目录使用
git add xxx/all ,将修改的文件或者很多文件添加到缓存区时使用
git commit ,提交修改到本地git仓库
git commit -a,暂存加提交，简化操作
git commit -amend 提交时，将最后一次已提交的记录删除，并生成新的提交版本

git clone [url] [local_prj_name],
url 协议: git://  http(s)://  user@server://path.git
将远程仓库克隆到本地,可以修改项目名
git push origin maset ,提交本地修改到远程仓库

git状态:(查看，git status)
未跟踪:该文件从来没有拉入git管理中
已跟踪:该文件已经处于git管理中
未修改:第一次clone后，处于git中且没有修改
已修改:在git管理中，且本地做了修改
暂存区:执行了git add命令后的文件状态
提交到本地:执行了git commit命令后，在暂存区中的文件被提交本地库，并新开了一个历史版本

查看详细修改:
git diff : 当前工作区和暂存区的文件比较，如果暂存区没有，则和最新版本比较
git diff --cached/--staged :暂存区和最新版本的比较

忽略某些文件的提交
文件 .gitignore 的格式规范如下：
所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。
可以使用标准的 glob 模式匹配。
匹配模式最后跟反斜杠（/）说明要忽略的是目录。
要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。

删除文件:
git rm ,
git rm --cached,

移动或修改文件
git mv [from_file] [to_file/to_dir]

查看历史记录:
git log,最新的版本再最上面
git log -p -2,每次提交的内容差异，-2表示最近2次更新
git log --stat ,增改行统计
git log --pretty=oneline
git reflog

撤销操作:
取消已经暂存的文件,git reset HEAD xxx
git reset --hard origin/master  将远程分支强制覆盖本地分支

远程仓库的使用:
查看远程仓库, git remote -v(详情)
添加远程仓库, git remote add [shortname] [url]
从远程仓库抓取数据到本地git库, git fetch shortname,创建了一个新的分支
推送数据到远程仓库, git push origin master,只有在所克隆的服务器上有写权限，或者其他人没有提交数据
查看远程仓库的信息, git remote show [remote-name]
远程仓库的重命名和删除, git remote rename/rm

打标签:
轻量级和含附注两种
显示标签,git tag
设置历史版本标签, git tag -a [历史版本校验和前几个字符或者全部都可以] [说明]
分享标签到远程服务器, git push origin [tagname] ,分享所有，则是git push origin --tags

本地分支使用:(将HEAD指针指向对应分支)
查看分支, git branch
创建分支, git branch [分支名]
切换分支, git checkout [分支名]
创建并切换分支, git checkout -b  [分支名]
合并分支, git merge xxx,在当前分支下,把xxx合并到当前分支
删除合并过的分支, git branch -d [分支名]
查看已经合并(未合并)过的分支, git branch --merged(--no-merged)

Git如何在不提交当前分支内容的情况下切换到其它分支进行操作——git stash 隐藏分支
1、git stash
2、切换到其他分支执行完后
3、git stash list 查找所有的隐藏分支
4、git stash apply [id] ，如stash {0}
5、删除隐藏分支信息，git stash drop [id]

将一个分支上的部分内容合并到当前分支
git checkout --patch xxx_brach file



远程分支使用:
创建并切换分支, git checkout -b  [分支名] [远程名/分支名]
远程分支合并到本地分支, git merge [远程分支名]
删除远程分支, git push [远程名] [本地分支]:[远程分支]，其中设置本地分支为空
	即:git push [远程名] :[远程分支]

分支的变基:不要在公共仓库中同时使用合并和变基操作
git rebase xxx ,将当前分支变基到指定分支xxx的上游去,将当前分支的变化在xxx上重演一遍

git服务器:
协议: 本地传输，SSH协议，Git协议和Http协议
SSH协议, 唯一一个同时支持读写操作的网络协议
	git clone ssh://user@server/project.git
	git remote add origin git@github.com:Username/Your_Repo_Name.git
	缺点:不能通过它对仓库实现匿名访问
Git协议, 提供匿名访问仓库的功能，并且可以允许推送操作，但是没有授权机制

HTTP协议,  易于架设,HTTP 进行推送操作也是可能的


Git工具:
交互式暂存, git add -i

=====================================================
scrapy 安装
使用pip安装scrapy不成功,则:（安装whl之前先安装wheel）
下载scrapy whl文件
下载scrapy依赖库twiste whl文件

1、安装pip install twiste.whl
2、安装scrapy相关依赖包,直接使用pip安装即可
3、安装scrapy
4、测试安装成功：scrapy -h

=====================================================

1、创建项目：scrapy startproject tutorial
	scrapy.cfg:项目配置文件
	tutorial:项目python模块
	tutorial/item.py:项目的item文件
	tutorial/pipelines.py:项目的pipelines文件
	tutorial/settings.py:项目的设置文件
	tutorial/spiders:防止spider代码的模块

2、item定义：保存爬取到的数据的容器
	 模式:field = scrapy.Field()

3、spiders:
	定义一个类集成scrapy.Spider
		name ：必须定义，且唯一
		start_urls:(list类型) 初始要爬取的url列表
		parse():参数为url的响应结果对象response，返回生成的item和进一步处理的url的request对象

4、爬取
进入项目根目录，运行 scrapy crawl name  # 其中name为要爬取的spider的唯一名字


5、获取数据


others:
1、运行scrapy crawl name 报错
提示 ImportError: No module named 'win32api'
需要安装 pip install pypiwin32

2、xpath
/html/body/div/div[2]/div[1]/div[1]
body > div > div:nth-child(2) > div.col-md-8 > div:nth-child(1)

3、git clone 报错fatal: error: RPC failed; result=55, HTTP code = 200
	修改git传送字节限制
	git config --global http.postBuffer 52428800

4、git clone 报错curl 56 OpenSSL SSL_read:SSL_ERROR_sysCALL
	第一步使用env命令保证了忽略证书错误是单次行为，不会成为默认的设置
	1、env命令设置GIT_SSL_NO_VERIFY环境变量为true,并同时调用git clone
	如:env GIT_SSL_NO_VERIFY=true git clone https://<host_name/git/project.git

	第二次，则把忽略证书错误的设置限定在特定的仓库
	2、克隆完毕的仓库中将http.sslVerify设置为false
		git config http.sslVerify "false"

=================================================================================

scrapy-redis + scrapyd + scrapydWeb 分布式爬虫部署及可视化部署

spring + elastic-job 管理任务定时调度机制

spring + oracle + elasticsearch + quarz  java爬虫定时调度


spring 基本层
common包；
	Constants：系统常用变量类
	ItemDic：相关枚举定义
	SessionThreadLocal：会话线程池local

controller包：spring控制器执行者

dao包：springDAO层

service包：springSERVICE层

model包：spring POJO

handler包：统一异常处理


web.xml：先做contextConfiguration --- applicationContext.xml  --- 这里可以定义实体bean(包括包扫描),特性开启（如：注解使能）,自定义配置文件，其他xml文件
		再做dispatcherServlet  --- application-servlet.xml  --- 这里可以定义实体bean，web相关配置
自编写的类，可以使用注解形式进行bean实例化，属性依赖注入

@Configuration 和 @Bean一起使用，前者是类注解，表明内部有bean实例的信息；后者为方法注解，表明该注解下的方法可以实例化bean，该bean的类型是方法返回值的类型，名字是方法名
@Autowired:根据对象类型搜索spring空间中的实体bean并注入到该对象变量中；@Resource:根据对象名字搜索spring空间中的实体bean并注入到该对象变量中
================================================

